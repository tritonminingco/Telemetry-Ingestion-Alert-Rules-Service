services:
  # PostgreSQL with PostGIS extension
  postgres:
    image: postgis/postgis:15-3.4
    container_name: dsg-postgres
    environment:
      POSTGRES_DB: dsg_telemetry
      POSTGRES_USER: dsg_user
      POSTGRES_PASSWORD: dsg_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres
      -c listen_addresses='*'
      -c max_connections=100
      -c password_encryption=md5
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dsg_user -d dsg_telemetry -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dsg-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: dsg-redis
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dsg-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dsg-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dsg.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8082:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy

  # Main application
  app:
    build: .
    container_name: dsg-telemetry-service
    environment:
      - DATABASE_URL=postgresql://dsg_user:dsg_password@postgres:5432/dsg_telemetry
      - REDIS_URL=redis://redis:6379
      - AUTH_TOKEN=your-secret-auth-token-here
      - DEBUG=true
      - LOG_LEVEL=INFO
    ports:
      - "8001:8000"
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dsg-network

  # Celery worker for background tasks
  celery:
    build: .
    container_name: dsg-celery
    command: celery -A app.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://dsg_user:dsg_password@postgres:5432/dsg_telemetry
      - REDIS_URL=redis://redis:6379
      - AUTH_TOKEN=your-secret-auth-token-here
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dsg-network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  dsg-network:
    driver: bridge
